from keras.models import load_model
from keras.preprocessing.image import img_to_array, save_img
import tensorflow as tf 
import base64
import io
import numpy as np
from PIL import Image

# Load your Keras model
model = load_model(r"C:\Users\DELL\OneDrive\Desktop\jayanth\server\server\test.h5")

def prepare_img(image, target_size):
    if image.mode != 'RGB':
        image = image.convert('RGB')
    image = image.resize(target_size)
    image = img_to_array(image)
    image = (image - 127.5) / 127.5
    image = np.expand_dims(image, axis=0)
    return image

def predict():
    try:
        json_data = """
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
"""  # Placeholder for your actual base64 encoded image data
        image_data = base64.b64decode(json_data)
        image = Image.open(io.BytesIO(image_data))
        target_size = (256, 256)

        prepared_image = prepare_img(image, target_size)

        predictions = model.predict(prepared_image)
        output = tf.reshape(predictions, [256, 256, 3])
        output = (output + 1) / 2

        save_img("out.jpg", output)  # Save the output image
        print("Output image saved successfully.")

        # Open the saved image for display (optional)
        l1 = Image.open("out.jpg")
        l1 = l1.resize((250, 250))
        l1.show()

    except Exception as e:
        print("An error occurred during prediction:", e)

print("Starting prediction...")
predict() 
print("Prediction complete.")